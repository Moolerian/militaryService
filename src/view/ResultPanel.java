package view;


import com.github.amsacode.predict4java.SatPos;
import gov.nasa.worldwind.View;
import gov.nasa.worldwind.WorldWind;
import gov.nasa.worldwind.avlist.AVKey;
import gov.nasa.worldwind.geom.LatLon;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.layers.IconLayer;
import gov.nasa.worldwind.layers.RenderableLayer;
import gov.nasa.worldwind.render.*;
import model.SatPassDetails;
import util.Constants;
import util.WWJUtil;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.Timer;

public class ResultPanel extends javax.swing.JPanel {

    private final Polyline line;
    private RenderableLayer lineLayer;

    private Date startDate;
    private Timer scheduleTimer;
    private SatPassDetails satPassDetails;

    private boolean showSatMovement = true;
    private final IconLayer iconLayer = new IconLayer();
    private ShapeAttributes attrs = new BasicShapeAttributes();
    private Cone shape;
    private RenderableLayer surfaceLayer = new RenderableLayer();

    /**
     * Creates new form ResultPanel
     */
    ResultPanel() {
        line = new Polyline();
        line.setFollowTerrain(true);

        this.lineLayer = new RenderableLayer();
        this.lineLayer.addRenderable(this.line);

        initComponents();

        this.showSatButton.setEnabled(false);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        panel = new javax.swing.JPanel();
        pic = new javax.swing.JLabel();
        sat = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        timer = new javax.swing.JLabel();
        resultDetailButton = new javax.swing.JButton();
        lineToggleButton = new javax.swing.JToggleButton();
        showSatButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        panel.setBackground(javax.swing.UIManager.getDefaults().getColor("Nb.ScrollPane.Border.color"));

        pic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/RSDK-ONE.png"))); // NOI18N

        sat.setFont(new java.awt.Font("Nimbus Roman No9 L", 1, 18)); // NOI18N
        sat.setForeground(java.awt.Color.white);
        sat.setText("CockTurk-2");

        time.setFont(new java.awt.Font("URW Chancery L", 0, 17)); // NOI18N
        time.setForeground(java.awt.Color.white);
        time.setText("1395/02/01  13:28:40 - 13:31:20 ");

        timer.setForeground(java.awt.Color.white);
        timer.setText("01:22:34");

        resultDetailButton.setText("جزییات");
        resultDetailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultDetailButtonActionPerformed(evt);
            }
        });

        lineToggleButton.setText("مدار حرکت");
        lineToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineToggleButtonActionPerformed(evt);
            }
        });

        showSatButton.setText("نمایش");
        showSatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSatButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
                panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(pic)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelLayout.createSequentialGroup()
                                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(panelLayout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addComponent(sat))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                                                .addComponent(time)))
                                                .addGap(8, 8, 8)
                                                .addComponent(timer))
                                        .addGroup(panelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(showSatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lineToggleButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(resultDetailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
                panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(pic)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(panelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(sat)
                                        .addComponent(timer))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(time)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(resultDetailButton)
                                        .addComponent(lineToggleButton)
                                        .addComponent(showSatButton)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1)
                        .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>


    private void resultDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {
        Root.resultDialog.setModal(false);

        ResultDetailDialog resultDetailDialog = new ResultDetailDialog(null, false);
        resultDetailDialog.setSatPassDetails(satPassDetails);

        Root.resultDialog.setVisible(false);
        Root.resultDialog.setAlwaysOnTop(true);
        resultDetailDialog.setVisible(true);

    }

    private void lineToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JToggleButton tBtn = (JToggleButton) evt.getSource();
        final Thread thread;
        if (tBtn.isSelected()) {
            WWJUtil.getWwj().getModel().getLayers().remove(lineLayer);
            showSatMovement = true;

            thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    if (showSatMovement) {
                        try {
                         //   UserFacingIcon icon;
                            // now for icon in a while loop
                            while (showSatMovement) {
                                WWJUtil.getWwj().getModel().getLayers().remove(surfaceLayer);
                                surfaceLayer.removeAllRenderables();

                                Calendar time = Calendar.getInstance();
                                SatPos satPosNow = satPassDetails.getPassPredictor().getSatPos(time.getTime());
                                double longitude = satPosNow.getLongitude() / 6.283185307179586D * 360.0D;
                                Position satPosition = new Position(LatLon.fromDegrees(satPosNow.getLatitude() / 6.283185307179586D * 360.0D,
                                        (longitude > 180) ? longitude - 360 : longitude), 0d);
                                gSatPosition = satPosition;
                                showSatButton.setEnabled(true);
                                attrs = new BasicShapeAttributes();
                                attrs.setInteriorMaterial(Material.GREEN);
                                attrs.setInteriorOpacity(0.7);
                                attrs.setEnableLighting(true);
                                attrs.setDrawInterior(true);
                                attrs.setDrawOutline(false);

                                shape = new Cone(satPosition, satPassDetails.getMaxEl() * 1000,
                                        satPassDetails.getPassPredictor().getWidthPassage() * 1000);

                                shape.setAttributes(attrs);
                                shape.setAltitudeMode(WorldWind.ABSOLUTE);
                                shape.setVisible(true);
                                shape.setValue(AVKey.DISPLAY_NAME, "Cone with equal axes, ABSOLUTE altitude mode");
                                surfaceLayer.addRenderable(shape);
                                WWJUtil.getWwj().getModel().getLayers().add(surfaceLayer);
                                Thread.sleep(150);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "خطایی در نمایش مدار رخ داده است");
                        }
                    }
                }
            });

            thread.start();
        } else {
            WWJUtil.getWwj().getModel().getLayers().remove(lineLayer);
            showSatMovement = false;
            iconLayer.removeAllIcons();
            WWJUtil.getWwj().getModel().getLayers().remove(iconLayer);
            WWJUtil.getWwj().getModel().getLayers().remove(surfaceLayer);
            this.showSatButton.setEnabled(false);
        }
    }

    private Position gSatPosition;

    private void showSatButtonActionPerformed(java.awt.event.ActionEvent evt) {
        View view = WWJUtil.getWwj().getView();
        view.goTo(gSatPosition, 800000d);
    }

    public void setColor(Color color) {
        setBackground(color);
    }

    void run() {
        scheduleTimer = new Timer();

        scheduleTimer.scheduleAtFixedRate(new TimerTask() {

            public void run() {
                setInterval();

            }
        }, 1000, 1000);
    }

    private boolean alertHasBeenShown = false;

    @SuppressWarnings("Duplicates")
    private void setInterval() {
        Date now = new Date();

        long diff = startDate.getTime() - now.getTime();
        long diffSeconds = diff / 1000 % 60;
        long diffMinutes = diff / (60 * 1000) % 60;
        long diffHours = diff / (60 * 60 * 1000);

        if (Constants.ALERT_STATUS) {
            if (diffHours == 0 && diffMinutes <= Constants.ALERT_TIME && !alertHasBeenShown) {
                String content = " کمتر از " + diffMinutes +
                        " دقیقه دیگر ماهواره " +
                        satPassDetails.getSatName() +
                        " تجهییز " +
                        satPassDetails.getFacilityName() +
                        " را رویت میکند ";

                AlertDialog alertDialog = new AlertDialog(null, false);
                alertDialog.setTitle(Constants.ALERT_MESSAGE);
                alertDialog.setContent(content);
                alertHasBeenShown = true;
                alertDialog.setVisible(true);
            }
        }

        if (diffHours == 0 && diffMinutes == 0 && diffSeconds == 0) {
            scheduleTimer.cancel();
            timer.setText("00:00:00");
        } else {
            String hours = String.valueOf((diffHours < 10) ? "0" + diffHours : diffHours);
            String second = String.valueOf((diffSeconds < 10) ? "0" + diffSeconds : diffSeconds);
            String minute = String.valueOf((diffMinutes < 10) ? "0" + diffMinutes : diffMinutes);
            String time = hours + ":" + minute + ":" + second;
            timer.setText(time);

        }
    }

    void setSatPassDetails(SatPassDetails satPassDetails) {
        this.satPassDetails = satPassDetails;
    }

    void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel panel;
    public javax.swing.JLabel pic;
    private javax.swing.JToggleButton lineToggleButton;
    public javax.swing.JLabel sat;
    private javax.swing.JSeparator jSeparator1;
    public javax.swing.JLabel time;
    private javax.swing.JLabel timer;
    private javax.swing.JButton resultDetailButton;
    private javax.swing.JButton showSatButton;
    // End of variables declaration
}